{"version":3,"sources":["./src/version.ts","./src/environments/environment.ts","./src/app/default/default.service.ts","./node_modules/moment/locale sync ^\\.\\/.*$","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/polyfills.ts","./src/generated/powershell-scripts.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class RuntimeVersion {\r\n    public static version = '2.0.0';\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * THIS FILE WAS GENERATED FROM msft-sme-build. DO NOT MODIFY. To change this file, make the appropriate changes in build\r\n *\r\n * The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n * `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n * The list of which env maps to which file can be found in `angular-cli.json`.\r\n */\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { AppContextService } from '@microsoft/windows-admin-center-sdk/angular';\r\nimport { PowerShell, PowerShellSession } from '@microsoft/windows-admin-center-sdk/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { PowerShellScripts } from '../../generated/powershell-scripts';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DefaultService {\r\n\r\n    m_session: PowerShellSession;\r\n\r\n    constructor(private appContextService: AppContextService) { }\r\n\r\n\r\n    public Get_ComputerName_ps1(): Observable<any> {\r\n        const script = PowerShell.createScript(PowerShellScripts.Get_ComputerName.script);\r\n        return this.getPowerShellResponse(script);\r\n    }\r\n\r\n    public Get_Adapters_ps1(): Observable<any> {\r\n        const script = PowerShell.createScript(PowerShellScripts.Get_Adapters.script);\r\n        return this.getPowerShellResponse(script);\r\n    }\r\n\r\n    private getPowerShellResponse(script): Observable<any> {\r\n        this.m_session = this.appContextService.powerShell.createSession(this.appContextService.activeConnection.nodeName);\r\n        return this.appContextService.powerShell.run(this.m_session, script).pipe(\r\n            map(\r\n                (response: { results: any; }) => {\r\n                    console.log(response);\r\n                    if (response && response.results) {\r\n                        return response.results;\r\n                    }\r\n                    return 'no response';\r\n                }\r\n            )\r\n        );\r\n    }\r\n\r\n}","var map = {\n\t\"./af\": \"K/tc\",\n\t\"./af.js\": \"K/tc\",\n\t\"./ar\": \"jnO4\",\n\t\"./ar-dz\": \"o1bE\",\n\t\"./ar-dz.js\": \"o1bE\",\n\t\"./ar-kw\": \"Qj4J\",\n\t\"./ar-kw.js\": \"Qj4J\",\n\t\"./ar-ly\": \"HP3h\",\n\t\"./ar-ly.js\": \"HP3h\",\n\t\"./ar-ma\": \"CoRJ\",\n\t\"./ar-ma.js\": \"CoRJ\",\n\t\"./ar-sa\": \"gjCT\",\n\t\"./ar-sa.js\": \"gjCT\",\n\t\"./ar-tn\": \"bYM6\",\n\t\"./ar-tn.js\": \"bYM6\",\n\t\"./ar.js\": \"jnO4\",\n\t\"./az\": \"SFxW\",\n\t\"./az.js\": \"SFxW\",\n\t\"./be\": \"H8ED\",\n\t\"./be.js\": \"H8ED\",\n\t\"./bg\": \"hKrs\",\n\t\"./bg.js\": \"hKrs\",\n\t\"./bm\": \"p/rL\",\n\t\"./bm.js\": \"p/rL\",\n\t\"./bn\": \"kEOa\",\n\t\"./bn-bd\": \"loYQ\",\n\t\"./bn-bd.js\": \"loYQ\",\n\t\"./bn.js\": \"kEOa\",\n\t\"./bo\": \"0mo+\",\n\t\"./bo.js\": \"0mo+\",\n\t\"./br\": \"aIdf\",\n\t\"./br.js\": \"aIdf\",\n\t\"./bs\": \"JVSJ\",\n\t\"./bs.js\": \"JVSJ\",\n\t\"./ca\": \"1xZ4\",\n\t\"./ca.js\": \"1xZ4\",\n\t\"./cs\": \"PA2r\",\n\t\"./cs.js\": \"PA2r\",\n\t\"./cv\": \"A+xa\",\n\t\"./cv.js\": \"A+xa\",\n\t\"./cy\": \"l5ep\",\n\t\"./cy.js\": \"l5ep\",\n\t\"./da\": \"DxQv\",\n\t\"./da.js\": \"DxQv\",\n\t\"./de\": \"tGlX\",\n\t\"./de-at\": \"s+uk\",\n\t\"./de-at.js\": \"s+uk\",\n\t\"./de-ch\": \"u3GI\",\n\t\"./de-ch.js\": \"u3GI\",\n\t\"./de.js\": \"tGlX\",\n\t\"./dv\": \"WYrj\",\n\t\"./dv.js\": \"WYrj\",\n\t\"./el\": \"jUeY\",\n\t\"./el.js\": \"jUeY\",\n\t\"./en-au\": \"Dmvi\",\n\t\"./en-au.js\": \"Dmvi\",\n\t\"./en-ca\": \"OIYi\",\n\t\"./en-ca.js\": \"OIYi\",\n\t\"./en-gb\": \"Oaa7\",\n\t\"./en-gb.js\": \"Oaa7\",\n\t\"./en-ie\": \"4dOw\",\n\t\"./en-ie.js\": \"4dOw\",\n\t\"./en-il\": \"czMo\",\n\t\"./en-il.js\": \"czMo\",\n\t\"./en-in\": \"7C5Q\",\n\t\"./en-in.js\": \"7C5Q\",\n\t\"./en-nz\": \"b1Dy\",\n\t\"./en-nz.js\": \"b1Dy\",\n\t\"./en-sg\": \"t+mt\",\n\t\"./en-sg.js\": \"t+mt\",\n\t\"./eo\": \"Zduo\",\n\t\"./eo.js\": \"Zduo\",\n\t\"./es\": \"iYuL\",\n\t\"./es-do\": \"CjzT\",\n\t\"./es-do.js\": \"CjzT\",\n\t\"./es-mx\": \"tbfe\",\n\t\"./es-mx.js\": \"tbfe\",\n\t\"./es-us\": \"Vclq\",\n\t\"./es-us.js\": \"Vclq\",\n\t\"./es.js\": \"iYuL\",\n\t\"./et\": \"7BjC\",\n\t\"./et.js\": \"7BjC\",\n\t\"./eu\": \"D/JM\",\n\t\"./eu.js\": \"D/JM\",\n\t\"./fa\": \"jfSC\",\n\t\"./fa.js\": \"jfSC\",\n\t\"./fi\": \"gekB\",\n\t\"./fi.js\": \"gekB\",\n\t\"./fil\": \"1ppg\",\n\t\"./fil.js\": \"1ppg\",\n\t\"./fo\": \"ByF4\",\n\t\"./fo.js\": \"ByF4\",\n\t\"./fr\": \"nyYc\",\n\t\"./fr-ca\": \"2fjn\",\n\t\"./fr-ca.js\": \"2fjn\",\n\t\"./fr-ch\": \"Dkky\",\n\t\"./fr-ch.js\": \"Dkky\",\n\t\"./fr.js\": \"nyYc\",\n\t\"./fy\": \"cRix\",\n\t\"./fy.js\": \"cRix\",\n\t\"./ga\": \"USCx\",\n\t\"./ga.js\": \"USCx\",\n\t\"./gd\": \"9rRi\",\n\t\"./gd.js\": \"9rRi\",\n\t\"./gl\": \"iEDd\",\n\t\"./gl.js\": \"iEDd\",\n\t\"./gom-deva\": \"qvJo\",\n\t\"./gom-deva.js\": \"qvJo\",\n\t\"./gom-latn\": \"DKr+\",\n\t\"./gom-latn.js\": \"DKr+\",\n\t\"./gu\": \"4MV3\",\n\t\"./gu.js\": \"4MV3\",\n\t\"./he\": \"x6pH\",\n\t\"./he.js\": \"x6pH\",\n\t\"./hi\": \"3E1r\",\n\t\"./hi.js\": \"3E1r\",\n\t\"./hr\": \"S6ln\",\n\t\"./hr.js\": \"S6ln\",\n\t\"./hu\": \"WxRl\",\n\t\"./hu.js\": \"WxRl\",\n\t\"./hy-am\": \"1rYy\",\n\t\"./hy-am.js\": \"1rYy\",\n\t\"./id\": \"UDhR\",\n\t\"./id.js\": \"UDhR\",\n\t\"./is\": \"BVg3\",\n\t\"./is.js\": \"BVg3\",\n\t\"./it\": \"bpih\",\n\t\"./it-ch\": \"bxKX\",\n\t\"./it-ch.js\": \"bxKX\",\n\t\"./it.js\": \"bpih\",\n\t\"./ja\": \"B55N\",\n\t\"./ja.js\": \"B55N\",\n\t\"./jv\": \"tUCv\",\n\t\"./jv.js\": \"tUCv\",\n\t\"./ka\": \"IBtZ\",\n\t\"./ka.js\": \"IBtZ\",\n\t\"./kk\": \"bXm7\",\n\t\"./kk.js\": \"bXm7\",\n\t\"./km\": \"6B0Y\",\n\t\"./km.js\": \"6B0Y\",\n\t\"./kn\": \"PpIw\",\n\t\"./kn.js\": \"PpIw\",\n\t\"./ko\": \"Ivi+\",\n\t\"./ko.js\": \"Ivi+\",\n\t\"./ku\": \"JCF/\",\n\t\"./ku.js\": \"JCF/\",\n\t\"./ky\": \"lgnt\",\n\t\"./ky.js\": \"lgnt\",\n\t\"./lb\": \"RAwQ\",\n\t\"./lb.js\": \"RAwQ\",\n\t\"./lo\": \"sp3z\",\n\t\"./lo.js\": \"sp3z\",\n\t\"./lt\": \"JvlW\",\n\t\"./lt.js\": \"JvlW\",\n\t\"./lv\": \"uXwI\",\n\t\"./lv.js\": \"uXwI\",\n\t\"./me\": \"KTz0\",\n\t\"./me.js\": \"KTz0\",\n\t\"./mi\": \"aIsn\",\n\t\"./mi.js\": \"aIsn\",\n\t\"./mk\": \"aQkU\",\n\t\"./mk.js\": \"aQkU\",\n\t\"./ml\": \"AvvY\",\n\t\"./ml.js\": \"AvvY\",\n\t\"./mn\": \"lYtQ\",\n\t\"./mn.js\": \"lYtQ\",\n\t\"./mr\": \"Ob0Z\",\n\t\"./mr.js\": \"Ob0Z\",\n\t\"./ms\": \"6+QB\",\n\t\"./ms-my\": \"ZAMP\",\n\t\"./ms-my.js\": \"ZAMP\",\n\t\"./ms.js\": \"6+QB\",\n\t\"./mt\": \"G0Uy\",\n\t\"./mt.js\": \"G0Uy\",\n\t\"./my\": \"honF\",\n\t\"./my.js\": \"honF\",\n\t\"./nb\": \"bOMt\",\n\t\"./nb.js\": \"bOMt\",\n\t\"./ne\": \"OjkT\",\n\t\"./ne.js\": \"OjkT\",\n\t\"./nl\": \"+s0g\",\n\t\"./nl-be\": \"2ykv\",\n\t\"./nl-be.js\": \"2ykv\",\n\t\"./nl.js\": \"+s0g\",\n\t\"./nn\": \"uEye\",\n\t\"./nn.js\": \"uEye\",\n\t\"./oc-lnc\": \"Fnuy\",\n\t\"./oc-lnc.js\": \"Fnuy\",\n\t\"./pa-in\": \"8/+R\",\n\t\"./pa-in.js\": \"8/+R\",\n\t\"./pl\": \"jVdC\",\n\t\"./pl.js\": \"jVdC\",\n\t\"./pt\": \"8mBD\",\n\t\"./pt-br\": \"0tRk\",\n\t\"./pt-br.js\": \"0tRk\",\n\t\"./pt.js\": \"8mBD\",\n\t\"./ro\": \"lyxo\",\n\t\"./ro.js\": \"lyxo\",\n\t\"./ru\": \"lXzo\",\n\t\"./ru.js\": \"lXzo\",\n\t\"./sd\": \"Z4QM\",\n\t\"./sd.js\": \"Z4QM\",\n\t\"./se\": \"//9w\",\n\t\"./se.js\": \"//9w\",\n\t\"./si\": \"7aV9\",\n\t\"./si.js\": \"7aV9\",\n\t\"./sk\": \"e+ae\",\n\t\"./sk.js\": \"e+ae\",\n\t\"./sl\": \"gVVK\",\n\t\"./sl.js\": \"gVVK\",\n\t\"./sq\": \"yPMs\",\n\t\"./sq.js\": \"yPMs\",\n\t\"./sr\": \"zx6S\",\n\t\"./sr-cyrl\": \"E+lV\",\n\t\"./sr-cyrl.js\": \"E+lV\",\n\t\"./sr.js\": \"zx6S\",\n\t\"./ss\": \"Ur1D\",\n\t\"./ss.js\": \"Ur1D\",\n\t\"./sv\": \"X709\",\n\t\"./sv.js\": \"X709\",\n\t\"./sw\": \"dNwA\",\n\t\"./sw.js\": \"dNwA\",\n\t\"./ta\": \"PeUW\",\n\t\"./ta.js\": \"PeUW\",\n\t\"./te\": \"XLvN\",\n\t\"./te.js\": \"XLvN\",\n\t\"./tet\": \"V2x9\",\n\t\"./tet.js\": \"V2x9\",\n\t\"./tg\": \"Oxv6\",\n\t\"./tg.js\": \"Oxv6\",\n\t\"./th\": \"EOgW\",\n\t\"./th.js\": \"EOgW\",\n\t\"./tk\": \"Wv91\",\n\t\"./tk.js\": \"Wv91\",\n\t\"./tl-ph\": \"Dzi0\",\n\t\"./tl-ph.js\": \"Dzi0\",\n\t\"./tlh\": \"z3Vd\",\n\t\"./tlh.js\": \"z3Vd\",\n\t\"./tr\": \"DoHr\",\n\t\"./tr.js\": \"DoHr\",\n\t\"./tzl\": \"z1FC\",\n\t\"./tzl.js\": \"z1FC\",\n\t\"./tzm\": \"wQk9\",\n\t\"./tzm-latn\": \"tT3J\",\n\t\"./tzm-latn.js\": \"tT3J\",\n\t\"./tzm.js\": \"wQk9\",\n\t\"./ug-cn\": \"YRex\",\n\t\"./ug-cn.js\": \"YRex\",\n\t\"./uk\": \"raLr\",\n\t\"./uk.js\": \"raLr\",\n\t\"./ur\": \"UpQW\",\n\t\"./ur.js\": \"UpQW\",\n\t\"./uz\": \"Loxo\",\n\t\"./uz-latn\": \"AQ68\",\n\t\"./uz-latn.js\": \"AQ68\",\n\t\"./uz.js\": \"Loxo\",\n\t\"./vi\": \"KSF8\",\n\t\"./vi.js\": \"KSF8\",\n\t\"./x-pseudo\": \"/X5v\",\n\t\"./x-pseudo.js\": \"/X5v\",\n\t\"./yo\": \"fzPg\",\n\t\"./yo.js\": \"fzPg\",\n\t\"./zh-cn\": \"XDpg\",\n\t\"./zh-cn.js\": \"XDpg\",\n\t\"./zh-hk\": \"SatO\",\n\t\"./zh-hk.js\": \"SatO\",\n\t\"./zh-mo\": \"OmwH\",\n\t\"./zh-mo.js\": \"OmwH\",\n\t\"./zh-tw\": \"kOpN\",\n\t\"./zh-tw.js\": \"kOpN\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"RnhZ\";","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { AppContextService, AuthorizationService, NavigationService } from '@microsoft/windows-admin-center-sdk/angular';\r\n\r\n@Component({\r\n    selector: 'sme-root',\r\n    templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent implements OnDestroy, OnInit {\r\n    constructor(\r\n        private appContext: AppContextService, private navigationService: NavigationService) {\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.appContext.ngInit({ navigationService: this.navigationService });\r\n    }\r\n\r\n    public ngOnDestroy() {\r\n        this.appContext.ngDestroy();\r\n    }\r\n}\r\n","<!-- Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. -->\r\n\r\n<sme-ux class=\"sme-layout-absolute sme-position-inset-none\">\r\n  <router-outlet></router-outlet>\r\n</sme-ux>","import { CommonModule } from '@angular/common';\r\nimport { ErrorHandler, NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport {\r\n    AppContextService,\r\n    AppErrorHandler,\r\n    CoreServiceModule,\r\n    DialogModule,\r\n    GuidedPanelModule,\r\n    IconModule,\r\n    IdleModule,\r\n    LoadingWheelModule,\r\n    ResourceService,\r\n    SmeUxModule,\r\n\r\n} from '@microsoft/windows-admin-center-sdk/angular';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { DefaultService } from './default/default.service';\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent\r\n    ],\r\n    imports: [\r\n        CoreServiceModule,\r\n        CommonModule,\r\n        BrowserModule,\r\n        DialogModule,\r\n        FormsModule,\r\n        SmeUxModule,\r\n        IconModule,\r\n        LoadingWheelModule,\r\n        GuidedPanelModule,\r\n        IdleModule,\r\n        AppRoutingModule,\r\n    ],\r\n    providers: [\r\n        ResourceService,\r\n        {\r\n            provide: ErrorHandler,\r\n            useClass: AppErrorHandler\r\n        },\r\n        DefaultService\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n    constructor(private appContextService: AppContextService) {\r\n        this.appContextService.initializeModule({});\r\n    }\r\n}\r\n","/**\r\n * This file includes polyfills needed by Angular and is loaded before the app.\r\n * You can add your own extra polyfills to this file.\r\n *\r\n * This file is divided into 2 sections:\r\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\r\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\r\n *      file.\r\n *\r\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\r\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\r\n * Microsoft Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\r\n\r\n *\r\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\r\n */\r\n\r\n/***************************************************************************************************\r\n * BROWSER POLYFILLS\r\n */\r\n\r\n// tslint:disable:ordered-imports\r\n// tslint:disable-next-line:jsdoc-format\r\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\r\nimport 'core-js/es6/symbol';\r\nimport 'core-js/es6/object';\r\nimport 'core-js/es6/function';\r\nimport 'core-js/es6/parse-int';\r\nimport 'core-js/es6/parse-float';\r\nimport 'core-js/es6/number';\r\nimport 'core-js/es6/math';\r\nimport 'core-js/es6/string';\r\nimport 'core-js/es6/date';\r\nimport 'core-js/es6/array';\r\nimport 'core-js/es6/regexp';\r\nimport 'core-js/es6/map';\r\nimport 'core-js/es6/set';\r\n\r\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\r\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\r\n\r\n/** IE10 and IE11 requires the following to support `@angular/animation`. */\r\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\r\n\r\n// tslint:disable-next-line:jsdoc-format\r\n/** Evergreen browsers require these. **/\r\nimport 'core-js/es6/reflect';\r\nimport 'core-js/es7/reflect';\r\n\r\n// tslint:disable-next-line:jsdoc-format\r\n/** ALL Firefox browsers require the following to support `@angular/animation`. **/\r\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\r\n\r\n/***************************************************************************************************\r\n * Zone JS is required by Angular itself.\r\n */\r\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\r\n\r\n/***************************************************************************************************\r\n * APPLICATION IMPORTS\r\n */\r\n// Server management tools specific polyfills\r\nimport '@microsoft/windows-admin-center-sdk/core/polyfills';\r\n\r\n/**\r\n * Date, currency, decimal and percent pipes.\r\n * Needed for: All but Chrome, Firefox, Microsoft Edge, IE11 and Safari 10\r\n */\r\n// import 'intl';  // Run `npm install --save intl`.\r\n/**\r\n * Need to import at least one locale-data with intl.\r\n */\r\n// import 'intl/locale-data/jsonp/en';\r\n","/* tslint:disable */\r\n/**\r\n * @file Source code generated by gulp-ps-code.\r\n * @version 1.1\r\n */\r\nexport module PowerShellScripts {\r\n    'use strict'\r\n\r\n    export const module = 'microsoft.hci.snap-in-demo';\r\n    export const resourceName = 'MicrosoftHciSnapInDemo';\r\n    export const Get_Adapters = {\r\n        command: 'Get-Adapters',\r\n        script: \"##Get-Adapters##:Get-Adapters.ps1\\nGet-IntelNetAdapter\\n\"\r\n    }\r\n    export const Get_ComputerName = {\r\n        command: 'Get-ComputerName',\r\n        script: \"##Get-ComputerName##:Get-ComputerName.ps1\\n$env:COMPUTERNAME\\n\"\r\n    }\r\n    export const Get_IntelEthernet = {\r\n        command: 'Get-IntelEthernet',\r\n        script: \"##Get-IntelEthernet##:Get-IntelEthernet.ps1\\nfunction Get-IntelEthernet\\n{\\n[CmdletBinding()]\\nParam(\\n[parameter(Mandatory = $false)]\\n[SupportsWildcards()]\\n[ValidateNotNullOrEmpty()]\\n[String[]]\\n$Name = \\u0027\\u0027,\\n[parameter(Mandatory = $false, Position = 0, ValueFromPipeline = $true)]\\n[ValidateNotNullOrEmpty()]\\n[object[]]\\n$Adapter = $null\\n)\\nBegin\\n{\\n$AdapterName = $Name\\n$script:ErrorMessagesGet = @()\\n$script:WarningMessagesGet = @()\\n$FinalObject = @()\\nGetIntelEthernetDevices\\nif ($null -ne $script:SupportedAdapters)\\n{\\n$script:MSNetAdapters = Get-NetAdapter -InterfaceDescription $SupportedAdapters.Name -ErrorAction SilentlyContinue\\n}\\nGetIntelDriverInfo\\n$script:MSNetHwInfo = Get-NetAdapterHardwareInfo -ErrorAction SilentlyContinue\\n$script:MSNetAdvProperty = Get-NetAdapterAdvancedProperty -ErrorAction SilentlyContinue\\n$AdapterPropertiesNames = @(\\\"NetCfgInstanceId\\\", \\\"DriverVersion\\\", \\\"Port\\\")\\n$972Key = Get-ItemProperty -Path \\\"HKLM:\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Class\\\\{4d36e972-e325-11ce-bfc1-08002be10318}\\\\*\\\" -Name $AdapterPropertiesNames -ErrorAction SilentlyContinue\\n}\\nProcess\\n{\\n$Adapters = $Adapter\\n$PreProcessedAdapterNames = ValidateGetAdapterNameParams $AdapterName $Adapters\\n$AdapterNamesArray = @(GetSupportedAdapters $PreProcessedAdapterNames)\\nforeach ($a in $AdapterNamesArray)\\n{\\n$TmpStatusMsg = CheckDeviceError $a\\nif (-not [string]::IsNullOrEmpty($TmpStatusMsg))\\n{\\n$Script:WarningMessagesGet += $TmpStatusMsg\\n}\\n$SupportedSpeeds = GetAdapterSupportedSpeeds $a\\n$AdapterStatuses = GetAdapterStatus $a\\n$BusTypes = GetAdapterBusType $a\\n$Capabilities = GetAdapterCapabilities $a $SupportedSpeeds\\n$ConnectionNames = GetAdapterConnectionName $a\\n$DDPPackageNameAndVersions = GetAdapterDDPPackageNameAndVersion $a\\n$DDPPackageTrackIds = GetAdapterDDPPackageTrackId $a\\n$DeviceStatuses = GetAdapterDeviceStatus $a $SupportedSpeeds\\n$DriverVersion = GetDriverVersion $a\\n$EEEStatuses = GetAdapterEEEStatus $a\\n$ETrackIDs = GetAdapterETrackId $a\\n$FullDuplex = GetFullDuplex $a\\n$LinkSpeedDuplex = GetLinkSpeedDuplex $a\\n$MaxSpeeds = GetAdapterMaxSpeed $a $SupportedSpeeds\\n$MediaTypes = GetAdapterMediaType $a\\n$MiniPortNames = GetAdapterMiniPortName $a\\n$NVMVersions = GetAdapterNVMVersion $a\\n$NegotiatedLinkSpeed = GetAdapterNegotiatedLinkSpeed $a\\n$NegotiatedLinkWidth = GetAdapterNegotiatedLinkWidth $a\\n$NetlistVersions = GetAdapterNetlistVersion $a\\n$OemFwVersions = GetOemFwVersion $a\\n$OriginalDisplayNames = GetOriginalDisplayName $a\\n$PCIDeviceIDs = GetAdapterPCIDeviceID $a\\n$PartNumbers = GetAdapterPartNumber $a\\n$PciLocations = GetAdapterPCILocation $a\\n$RegistryValues = GetAdapterPropertiesFromRegistry $a $972Key\\n$SanMacAddresses = GetAdapterSanMacAddress $a\\n$FinalObject += [PsCustomObject] @{\\nPSTypeName          = \\u0027IntelEthernetAdapter\\u0027\\nAdapterStatus       = $AdapterStatuses\\nBusType             = $BusTypes.BusType\\nBusTypeString       = $BusTypes.BusTypeString\\nCapabilities        = $Capabilities\\nConnectionName      = $ConnectionNames\\nDDPPackageName      = $DDPPackageNameAndVersions.Name\\nDDPPackageTrackId   = $DDPPackageTrackIds\\nDDPPackageVersion   = $DDPPackageNameAndVersions.Version\\nDeviceStatus        = $DeviceStatuses.DeviceStatus\\nDeviceStatusString  = $DeviceStatuses.DeviceStatusString\\nDriverVersion       = $DriverVersion\\nEEE                 = $EEEStatuses.EEEStatus\\nEEEString           = $EEEStatuses.EEEStatusString\\nETrackID            = $ETrackIDs\\nFWVersion           = $OemFwVersions\\nFullDuplex          = $FullDuplex\\nLocation            = $PciLocations\\nMaxSpeed            = $MaxSpeeds\\nMediaType           = $MediaTypes.MediaType\\nMediaTypeString     = $MediaTypes.MediaTypeString\\nMiniPortInstance    = $MiniPortNames.Instance\\nMiniPortName        = $MiniPortNames.Name\\nNVMVersion          = $NVMVersions\\nName                = $a\\nNegotiatedLinkSpeed       = $NegotiatedLinkSpeed.NegotiatedLinkSpeed\\nNegotiatedLinkSpeedString = $NegotiatedLinkSpeed.NegotiatedLinkSpeedString\\nNegotiatedLinkWidth       = $NegotiatedLinkWidth.NegotiatedLinkWidth\\nNegotiatedLinkWidthString = $NegotiatedLinkWidth.NegotiatedLinkWidthString\\nNetlistVersion      = $NetlistVersions\\nOriginalDisplayName = $OriginalDisplayNames\\nPCIDeviceID         = $PCIDeviceIDs\\nPartNumber          = $PartNumbers\\nPortNumber          = $RegistryValues.Port\\nPortNumberString    = $RegistryValues.PortString\\nSANMacAddress       = $SanMacAddresses\\nSpeed               = $LinkSpeedDuplex.Speed\\nSpeedString         = $LinkSpeedDuplex.SpeedString\\n}\\n}\\n}\\nEnd\\n{\\n$FinalObject | Sort-Object -Property Location\\nforeach ($WarningMessage in $WarningMessagesGet)\\n{\\nWrite-Warning $WarningMessage\\n}\\nforeach ($ErrorMessage in $ErrorMessagesGet)\\n{\\nWrite-Error $ErrorMessage\\n}\\n}\\n}\\nfunction GetAdapterBusType($AdapterName)\\n{\\n$BusType       = 0\\n$BusTypeString = $Messages.Unknown\\nforeach ($Bus in $script:BusTypesArray)\\n{\\nif (($null -ne $Bus) -and ($Bus.InstanceName -eq $AdapterName))\\n{\\n$BusType       = $Bus.BusType\\n$BusTypeString = $BusTypeMap[[int]$Bus.BusType]\\nbreak\\n}\\n}\\nreturn [PsCustomObject] @{\\nBusType       = $BusType\\nBusTypeString = $BusTypeString }\\n}\\nfunction GetAdapterConnectionName($AdapterName)\\n{\\nreturn ($MSNetAdapters | Where-Object {$_.InterfaceDescription -eq $AdapterName}).InterfaceAlias\\n}\\nfunction GetAdapterDDPPackageNameAndVersion($AdapterName)\\n{\\n$Name    = $Messages.NotSupported\\n$Version = $Messages.NotSupported\\nforeach ($DDPPkgName in $script:DDPPkgNamesArray)\\n{\\nif (($null -ne $DDPPkgName) -and ($DDPPkgName.InstanceName -eq $AdapterName))\\n{\\n$Name    = [System.Text.Encoding]::ASCII.GetString($DDPPkgName.Name)\\n$Version = $DDPPkgName.Major.ToString() + \\\".\\\" + $DDPPkgName.Minor.ToString()\\nbreak\\n}\\n}\\nreturn [PsCustomObject] @{\\nName    = $Name\\nVersion = $Version }\\n}\\nfunction GetAdapterDDPPackageTrackId($AdapterName)\\n{\\n$TrackId = $Messages.NotSupported\\n$Params = @{Version = [uint32]1; Size = [uint32]12; Type = [uint32]1;}\\n$Result = InvokeCimMethod \\\"IntlLan_GetTrackId\\\" $AdapterName \\\"WmiGetTrackId\\\" $Params\\nif (($null -ne $Result) -and ($Result.ReturnValue -eq $true))\\n{\\n$TrackId = \\u00270x{0:X}\\u0027 -f $Result.Track_Id\\n}\\nreturn $TrackId\\n}\\nfunction GetAdapterDeviceStatus($AdapterName, $SupportedSpeeds)\\n{\\n$DeviceStatus = 0\\n$DeviceStatusString = $Messages.Unknown\\n$AdapterNames = $MSNetAdapters | Where-Object {$_.InterfaceDescription -eq $AdapterName}\\nforeach($TmpAdapter in $AdapterNames)\\n{\\nif (\\\"Up\\\" -eq $TmpAdapter.Status)\\n{\\n$MaxSpeed = GetAdapterMaxSpeed $AdapterName $SupportedSpeeds\\n$CurrentSpeed = (GetLinkSpeedDuplex $AdapterName).Speed\\nif ($CurrentSpeed -lt $MaxSpeed)\\n{\\n$DeviceStatus = 4\\n$DeviceStatusString = $Messages.LinkUpNotMax\\n}\\nelse\\n{\\n$DeviceStatus = 1\\n$DeviceStatusString = $Messages.LinkUp\\n}\\n}\\nelseif (\\\"Disconnected\\\" -eq $TmpAdapter.Status)\\n{\\n$DeviceStatus = 2\\n$DeviceStatusString = $Messages.LinkDown\\n}\\nelseif (\\\"Disabled\\\" -eq $TmpAdapter.Status)\\n{\\n$DeviceStatus = 0\\n$DeviceStatusString = $Messages.Disabled\\n}\\nelseif ($null -eq ($script:PnpDevice | Where-Object {$_.Name -eq $TmpAdapter.InterfaceDescription}).Service)\\n{\\n$DeviceStatus = 4\\n$DeviceStatusString = $Messages.NotPresent\\n}\\n}\\nreturn [PsCustomObject] @{\\nDeviceStatus       = $DeviceStatus\\nDeviceStatusString = $DeviceStatusString}\\n}\\nfunction GetAdapterETrackId($AdapterName)\\n{\\n$ETrackId = $Messages.NotSupported\\nforeach ($ETrackId in $script:ETrackIdsArray)\\n{\\nif (($null -ne $ETrackId) -and ($ETrackId.InstanceName -eq $AdapterName))\\n{\\n$ETrackId = \\u00270x{0:X}\\u0027 -f $ETrackId.Id\\nbreak\\n}\\n}\\nreturn $ETrackId\\n}\\nfunction GetAdapterNVMVersion($AdapterName)\\n{\\n$Version = $Messages.NotSupported\\nforeach ($NVMVersion in $script:NVMVersionsArray)\\n{\\nif (($null -ne $NVMVersion) -and ($NVMVersion.InstanceName -eq $AdapterName))\\n{\\n$Version = (($NVMVersion.Version -band 0xffff) -shr 8).ToString() + \\\".\\\" + (($NVMVersion.Version -band 0xff)).ToString(\\\"X2\\\")\\nbreak\\n}\\n}\\nreturn $Version\\n}\\nfunction GetAdapterNetlistVersion($AdapterName)\\n{\\n$NetlistVersion = $Messages.NotSupported\\n$Params = @{Version = [uint32]1; Size = [uint32]12; Type = [uint32]1;}\\n$Result = InvokeCimMethod \\\"IntlLan_GetNVMNetlistInfo\\\" $AdapterName \\\"WmiGetNVMNetlistInfo\\\" $params\\nif (($null -ne $Result) -and ($Result.ReturnValue -eq $true))\\n{\\n$NetlistVersion = [System.Text.Encoding]::ASCII.GetString($Result.VersionStr)\\n}\\nreturn $NetlistVersion\\n}\\nfunction GetAdapterPartNumber($AdapterName)\\n{\\n$PartNumberString = $Messages.NotSupported\\nforeach ($PartNumber in $script:PartNumbersArray)\\n{\\nif (($null -ne $PartNumber) -and ($PartNumber.InstanceName -eq $AdapterName))\\n{\\n$PartNumberString = [System.Text.Encoding]::ASCII.GetString($PartNumber.PartNumberString)\\nbreak\\n}\\n}\\nreturn $PartNumberString\\n}\\nfunction GetAdapterSanMacAddress($AdapterName)\\n{\\n$MacAddress = $Messages.NotSupported\\nforeach ($SanMacAddress in $script:SanMacAddressesArray)\\n{\\nif (($null -ne $SanMacAddress) -and ($SanMacAddress.InstanceName -eq $AdapterName))\\n{\\n$MacAddress = \\\"\\\"\\nfor ($i = 0; $i -lt 6; $i++)\\n{\\n$MacAddress += $SanMacAddress.SanMacAddr[$i].ToString(\\\"X2\\\")\\n}\\nbreak\\n}\\n}\\nreturn $MacAddress\\n}\\nfunction GetAdapterMediaType($AdapterName)\\n{\\n$MediaType = [PsCustomObject] @{\\nMediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_UNKNOWN\\nMediaTypeString = $Messages.Unknown }\\n$ServiceName = ($script:SupportedAdapters | Where-Object {$_.Name -eq $AdapterName}).ServiceName\\nswitch ($ServiceName)\\n{\\nicea  { $MediaType = GetAdapterMediaTypeIce $AdapterName; break }\\nscea  { $MediaType = GetAdapterMediaTypeIce $AdapterName; break }\\ni40ea { $MediaType = GetAdapterMediaTypeI40e $AdapterName; break }\\ni40eb { $MediaType = GetAdapterMediaTypeI40e $AdapterName; break }\\n}\\nreturn $MediaType\\n}\\nfunction GetAdapterMediaTypeIce($AdapterName)\\n{\\nforeach ($PhyInfo in $script:PhyInfoArray)\\n{\\nif (($null -ne $PhyInfo) -and ($PhyInfo.InstanceName -eq $AdapterName) -and ($PhyInfo.PhyInfo.Length -ge 8))\\n{\\n$PhyType = $PhyInfo.PhyInfo[0];\\n$LinkInfo = $PhyInfo.PhyInfo[1];\\n$MediaInterface = $PhyInfo.PhyInfo[7];\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Unknown\\n$MediaTypeString = $Messages.Unknown\\nif ($LinkInfo -band 0x01)\\n{\\nswitch ($PhyType)\\n{\\n{$_ -in [int][CVL_PHY_TYPE]::CVL10GSFIAOC_ACC,\\n[int][CVL_PHY_TYPE]::CVL25GAUIAOC_ACC,\\n[int][CVL_PHY_TYPE]::CVL40GXLAUIAOC_ACC,\\n[int][CVL_PHY_TYPE]::CVL50GLAUI2AOC_ACC,\\n[int][CVL_PHY_TYPE]::CVL50GAUI2AOC_ACC,\\n[int][CVL_PHY_TYPE]::CVL50GAUI1AOC_ACC,\\n[int][CVL_PHY_TYPE]::CVL100GCAUI4AOC_ACC,\\n[int][CVL_PHY_TYPE]::CVL100GAUI4AOC_ACC,\\n[int][CVL_PHY_TYPE]::CVL100GAUI2AOC_ACC}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_AOC_ACC\\n$MediaTypeString = $Messages.AOCACC\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL5GBaseKR,\\n[int][CVL_PHY_TYPE]::CVL10GBaseKR,\\n[int][CVL_PHY_TYPE]::CVL25GBaseKR}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Backplane_KR\\n$MediaTypeString = $Messages.BackplaneKR\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL25GBaseKR1)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Backplane_KR1\\n$MediaTypeString = $Messages.BackplaneKR1\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL50GBaseKR2)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Backplane_KR2\\n$MediaTypeString = $Messages.BackplaneKR2\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL100GBaseKR2PAM4)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Backplane_KR2_PAM4\\n$MediaTypeString = $Messages.BackplaneKR2PAM4\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL40GBaseKR4,\\n[int][CVL_PHY_TYPE]::CVL100GBaseKR4}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Backplane_KR4\\n$MediaTypeString = $Messages.BackplaneKR4\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL100GBaseKR4PAM4)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Backplane_KR4_PAM4\\n$MediaTypeString = $Messages.BackplaneKR4PAM4\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL50GBaseKRPAM4)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Backplane_KR_PAM4\\n$MediaTypeString = $Messages.BackplaneKRPAM4\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL25GBaseKRS)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Backplane_KR_S\\n$MediaTypeString = $Messages.BackplaneKRS\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL1000BaseKX,\\n[int][CVL_PHY_TYPE]::CVL2Point5GBaseKX}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Backplane_KX\\n$MediaTypeString = $Messages.BackplaneKX\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL10GSFIC2C,\\n[int][CVL_PHY_TYPE]::CVL25GAUIC2C,\\n[int][CVL_PHY_TYPE]::CVL40GXLAUI,\\n[int][CVL_PHY_TYPE]::CVL50GLAUI2,\\n[int][CVL_PHY_TYPE]::CVL50GAUI2,\\n[int][CVL_PHY_TYPE]::CVL50GAUI1,\\n[int][CVL_PHY_TYPE]::CVL100GCAUI4,\\n[int][CVL_PHY_TYPE]::CVL100GAUI4,\\n[int][CVL_PHY_TYPE]::CVL100GAUI2}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Chip_to_Chip\\n$MediaTypeString = $Messages.ChiptoChip\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL1000BaseT,\\n[int][CVL_PHY_TYPE]::CVL2Point5GBaseT,\\n[int][CVL_PHY_TYPE]::CVL5GBaseT,\\n[int][CVL_PHY_TYPE]::CVL10GBaseT,\\n[int][CVL_PHY_TYPE]::CVL25GBaseT}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Copper_T\\n$MediaTypeString = $Messages.CopperT\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL100BaseTX)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Copper_TX\\n$MediaTypeString = $Messages.CopperTX\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL10GSFIDA)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Direct_Attach\\n$MediaTypeString = $Messages.DirectAttach\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL100GBaseCP2)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Direct_Attach_CP2\\n$MediaTypeString = $Messages.DirectAttachCP2\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL25GBaseCR)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Direct_Attach_CR\\n$MediaTypeString = $Messages.DirectAttachCR\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL25GBaseCR1)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Direct_Attach_CR1\\n$MediaTypeString = $Messages.DirectAttachCR1\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL50GBaseCR2)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Direct_Attach_CR2\\n$MediaTypeString = $Messages.DirectAttachCR2\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL40GBaseCR4,\\n[int][CVL_PHY_TYPE]::CVL100GBaseCR4}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Direct_Attach_CR4\\n$MediaTypeString = $Messages.DirectAttachCR4\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL50GBaseCRPAM4)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Direct_Attach_CR_PAM4\\n$MediaTypeString = $Messages.DirectAttachCRPAM4\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL25GBaseCRS)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Direct_Attach_CR_S\\n$MediaTypeString = $Messages.DirectAttachCRS\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL100GBaseDR)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_DR\\n$MediaTypeString = $Messages.FiberDR\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL50GBaseFR)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_FR\\n$MediaTypeString = $Messages.FiberFR\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL10GBaseLR,\\n[int][CVL_PHY_TYPE]::CVL25GBaseLR,\\n[int][CVL_PHY_TYPE]::CVL50GBaseLR}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_LR\\n$MediaTypeString = $Messages.FiberLR\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL40GBaseLR4,\\n[int][CVL_PHY_TYPE]::CVL100GBaseLR4}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_LR4\\n$MediaTypeString = $Messages.FiberLR4\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL1000BaseLX)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_LX\\n$MediaTypeString = $Messages.FiberLX\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL10GBaseSR,\\n[int][CVL_PHY_TYPE]::CVL25GBaseSR,\\n[int][CVL_PHY_TYPE]::CVL50GBaseSR}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_SR\\n$MediaTypeString = $Messages.FiberSR\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL100GBaseSR2)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_SR2\\n$MediaTypeString = $Messages.FiberSR2\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL40GBaseSR4,\\n[int][CVL_PHY_TYPE]::CVL100GBaseSR4}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_SR4\\n$MediaTypeString = $Messages.FiberSR4\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL1000BaseSX)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_SX\\n$MediaTypeString = $Messages.FiberSX\\nbreak\\n}\\n([int][CVL_PHY_TYPE]::CVL2Point5gBaseX)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Fiber_X\\n$MediaTypeString = $Messages.FiberX\\nbreak\\n}\\n{$_ -in [int][CVL_PHY_TYPE]::CVL100MSGMII,\\n[int][CVL_PHY_TYPE]::CVL1GSGMII}\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_SGMII\\n$MediaTypeString = $Messages.SGMII\\nbreak\\n}\\ndefault\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Unknown\\n$MediaTypeString = $Messages.Unknown\\nbreak\\n}\\n}\\n}\\nelse\\n{\\nswitch ($MediaInterface)\\n{\\n([int][CPK_PHY_INFO]::CPK_PHYINFO_MEDIA_BACKPLANE)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_INTERFACE_CVL_BACKPLANE\\n$MediaTypeString = $Messages.Backplane\\nbreak\\n}\\n([int][CPK_PHY_INFO]::CPK_PHYINFO_MEDIA_QSFP)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_INTERFACE_CVL_QSFP\\n$MediaTypeString = $Messages.QSFP\\nbreak\\n}\\n([int][CPK_PHY_INFO]::CPK_PHYINFO_MEDIA_SFP)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_INTERFACE_CVL_SFP\\n$MediaTypeString = $Messages.SFP\\nbreak\\n}\\n([int][CPK_PHY_INFO]::CPK_PHYINFO_MEDIA_BASE_T)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_INTERFACE_CVL_BASE_T\\n$MediaTypeString = $Messages.CopperT\\nbreak\\n}\\n([int][CPK_PHY_INFO]::CPK_PHYINFO_MEDIA_SGMII)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_INTERFACE_CVL_SGMII\\n$MediaTypeString = $Messages.SGMII\\nbreak\\n}\\n([int][CPK_PHY_INFO]::CPK_PHYINFO_MEDIA_FIBER)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_INTERFACE_CVL_FIBER\\n$MediaTypeString = $Messages.Fiber\\nbreak\\n}\\ndefault\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_CVL_Unknown\\n$MediaTypeString = $Messages.Unknown\\nbreak\\n}\\n}\\n}\\n}\\n}\\nreturn [PsCustomObject] @{\\nMediaType = $MediaType\\nMediaTypeString = $MediaTypeString }\\n}\\nfunction GetAdapterMediaTypeI40e($AdapterName)\\n{\\nforeach ($PhyInfo in $script:PhyInfoArray)\\n{\\nif (($null -ne $PhyInfo) -and ($PhyInfo.InstanceName -eq $AdapterName) -and ($PhyInfo.PhyInfo.Length -ge 13))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_UNKNOWN\\n$MediaTypeString = $Messages.Unknown\\n$PhyType = $PhyInfo.PhyInfo[0];\\n$LinkType = ([uint32]$PhyInfo.PhyInfo[11] -shl 24) + ([uint32]$PhyInfo.PhyInfo[10] -shl 16) + ([uint32]$PhyInfo.PhyInfo[9] -shl 8) + [uint32]$PhyInfo.PhyInfo[8];\\n$LinkTypeExt = $PhyInfo.PhyInfo[12];\\nif ($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_EMPTY)\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_UNKNOWN\\n}\\nelseif (($LinkType -band [int][LinkType]::LINK_TYPE_40GBASE_KR4) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_10GBASE_KR) -or\\n($LinkTypeExt -band [int][LinkTypeExt]::LINK_TYPE_25GBase_KR))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_BACKPLANE\\n$MediaTypeString = $Messages.Backplane\\n}\\nelseif (($LinkType -band [int][LinkType]::LINK_TYPE_10GBASE_SFP_Cu) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_10GBASE_CR1))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_SFPDIRECTATTACH\\n$MediaTypeString = $Messages.SFPDirectAttach\\n}\\nelseif (($LinkType -band [int][LinkType]::LINK_TYPE_40GBASE_LR4) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_10GBASE_LR) -or\\n($LinkTypeExt -band [int][LinkTypeExt]::LINK_TYPE_25GBase_LR))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_LR_FIBER\\n$MediaTypeString = $Messages.LRFiber\\n}\\nelseif (($LinkType -band [int][LinkType]::LINK_TYPE_10GBASE_SR) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_40GBASE_SR4) -or\\n($LinkTypeExt -band [int][LinkTypeExt]::LINK_TYPE_25GBase_SR))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_SR_FIBER\\n$MediaTypeString = $Messages.SRFiber\\n}\\nelseif (($LinkType -band [int][LinkType]::LINK_TYPE_10GBASE_T) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_1000BASE_T) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_100BASE_TX) -or\\n($LinkTypeExt -band [int][LinkTypeExt]::LINK_TYPE_2_5GBASE_T) -or\\n($LinkTypeExt -band [int][LinkTypeExt]::LINK_TYPE_5GBASE_T))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_COPPER\\n$MediaTypeString = $Messages.Copper\\n}\\nelseif (($LinkType -band [int][LinkType]::LINK_TYPE_10GBASE_CR1_CU) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_40GBASE_CR4_CU) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_40GBASE_CR4))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_QSFPDIRECTATTACH\\n$MediaTypeString = $Messages.QSFPDirectAttach\\n}\\nelseif (($LinkType -band [int][LinkType]::LINK_TYPE_10GBASE_KX4) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_1000BASE_KX))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_KX4BACKPLANE\\n$MediaTypeString = $Messages.KXBackplane\\n}\\nelseif (($LinkType -band [int][LinkType]::LINK_TYPE_XAUI) -or\\n($LinkType -band [int][LinkType]::LINK_TYPE_XLAUI))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_XAUI\\n$MediaTypeString = $Messages.XAUI\\n}\\nelseif (($LinkTypeExt -band [int][LinkTypeExt]::LINK_TYPE_25G_AOC) -or\\n($LinkTypeExt -band [int][LinkTypeExt]::LINK_TYPE_25G_ACC) -or\\n($LinkTypeExt -band [int][LinkTypeExt]::LINK_TYPE_25GBase_CR))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_SFP28DIRECTATTACH\\n$MediaTypeString = $Messages.SFP28DirectAttach\\n}\\nelseif ($LinkTypeExt -eq 0 -and $LinkType -eq 0)\\n{\\nif (($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_40GBASE_KR4) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_10GBASE_KR) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_25GBASE_KR))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_BACKPLANE\\n$MediaTypeString = $Messages.Backplane\\n}\\nelseif (($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_10GBASE_SFPP_CU) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_10GBASE_CR1))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_SFPDIRECTATTACH\\n$MediaTypeString = $Messages.SFPDirectAttach\\n}\\nelseif (($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_40GBASE_LR4) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_10GBASE_LR) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_25GBASE_LR))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_LR_FIBER\\n$MediaTypeString = $Messages.LRFiber\\n}\\nelseif (($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_10GBASE_SR) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_40GBASE_SR4) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_25GBASE_SR))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_SR_FIBER\\n$MediaTypeString = $Messages.SRFiber\\n}\\nelseif (($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_10GBASE_T) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_1000BASE_T) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_100BASE_TX))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_COPPER\\n$MediaTypeString = $Messages.Copper\\n}\\nelseif (($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_10GBASE_CR1_CU) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_40GBASE_CR4_CU) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_40GBASE_CR4))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_QSFPDIRECTATTACH\\n$MediaTypeString = $Messages.QSFPDirectAttach\\n}\\nelseif (($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_10GBASE_KX4) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_1000BASE_KX))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_KX4BACKPLANE\\n$MediaTypeString = $Messages.KXBackplane\\n}\\nelseif (($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_XAUI) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_XLAUI))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_XAUI\\n$MediaTypeString = $Messages.XAUI\\n}\\nelseif (($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_25GBASE_AOC) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_25GBASE_ACC) -or\\n($PhyType -eq [int][I40E_PHY_TYPE]::I40E_PHY_TYPE_25GBASE_CR))\\n{\\n$MediaType = [int][NCS_ADAPTER_MEDIA_TYPE]::NCS_MEDIA_SFP28DIRECTATTACH\\n$MediaTypeString = $Messages.SFP28DirectAttach\\n}\\n}\\n}\\n}\\nreturn [PsCustomObject] @{\\nMediaType = $MediaType\\nMediaTypeString = $MediaTypeString }\\n}\\nfunction GetAdapterPCILocation($AdapterName)\\n{\\n$PCILocation = $Messages.NotSupported\\nforeach ($HwInfo in $MSNetHwInfo)\\n{\\nif ($AdapterName -eq $HwInfo.ifDesc)\\n{\\n$PCILocation = $HwInfo.Bus.ToString() + \\\":\\\" + $HwInfo.Device.ToString()  + \\\":\\\" + $HwInfo.Function.ToString() + \\\":\\\" + $HwInfo.Segment.ToString()\\nbreak\\n}\\n}\\nreturn $PCILocation\\n}\\nfunction GetOriginalDisplayName($AdapterName)\\n{\\nreturn ($MSNetHwInfo | Where-Object {$_.ifDesc -eq $AdapterName}).ifDesc\\n}\\nfunction GetOemFwVersion($AdapterName)\\n{\\n$Version = $Messages.NotSupported\\nforeach ($FwVersion in $script:FwVersionsArray)\\n{\\nif ($FwVersion.InstanceName -eq $AdapterName)\\n{\\nif ($FwVersion.SingleNvmVersion[0] -ne 0)\\n{\\n$Version = [System.Text.Encoding]::ASCII.GetString($FwVersion.SingleNvmVersion)\\n}\\nbreak\\n}\\n}\\nreturn $Version\\n}\\nfunction GetAdapterPCIDeviceID($AdapterName)\\n{\\nreturn ($MSNetAdapters | Where-Object {$_.InterfaceDescription -eq $AdapterName}).PnPDeviceID\\n}\\nfunction GetAdapterNegotiatedLinkWidth($AdapterName)\\n{\\n$NegotiatedLinkWidth = ($MSNetHwInfo | Where-Object {$_.ifDesc -eq $AdapterName}).PciExpressCurrentLinkWidth\\n$NegotiatedLinkWidthString = \\\"x\\\" + ($MSNetHwInfo | Where-Object {$_.ifDesc -eq $AdapterName}).PciExpressCurrentLinkWidth.ToString()\\nreturn [PsCustomObject] @{\\nNegotiatedLinkWidth = $NegotiatedLinkWidth\\nNegotiatedLinkWidthString = $NegotiatedLinkWidthString }\\n}\\nfunction GetAdapterNegotiatedLinkSpeed($AdapterName)\\n{\\n$NegotiatedLinkSpeed = ($MSNetHwInfo | Where-Object {$_.ifDesc -eq $AdapterName}).PciExpressCurrentLinkSpeedEncoded\\nswitch ($NegotiatedLinkSpeed)\\n{\\n0 {$NegotiatedLinkSpeedString = $Messages.Unknown; break}\\n1 {$NegotiatedLinkSpeedString = $Messages.NegLaneSpeed25; break}\\n2 {$NegotiatedLinkSpeedString = $Messages.NegLaneSpeed50; break}\\n3 {$NegotiatedLinkSpeedString = $Messages.NegLaneSpeed80; break}\\ndefault {$NegotiatedLinkSpeedString = $Messages.Unknown; break}\\n}\\nreturn [PsCustomObject] @{\\nNegotiatedLinkSpeed = $NegotiatedLinkSpeed\\nNegotiatedLinkSpeedString = $NegotiatedLinkSpeedString }\\n}\\nfunction GetLinkSpeedDuplex($AdapterName)\\n{\\n$AdapterObj = $MSNetAdapters | Where-Object {$_.InterfaceDescription -eq $AdapterName}\\n$Speed = $AdapterObj.Speed\\n$SpeedString = $AdapterObj.LinkSpeed\\n$FullDuplex = $AdapterObj.FullDuplex\\nif (\\\"Up\\\" -ne $AdapterObj.Status)\\n{\\n$Speed = 0\\n$SpeedString = $Messages.NotAvailable\\n}\\nelseif ($true -eq $FullDuplex)\\n{\\n$SpeedString += \\\" \\\" + $Messages.FullDuplex\\n}\\nreturn [PsCustomObject] @{\\nSpeed = $Speed\\nSpeedString = $SpeedString }\\n}\\nfunction GetFullDuplex($AdapterName)\\n{\\n$FullDuplex = ($MSNetAdapters | Where-Object {$_.InterfaceDescription -eq $AdapterName}).FullDuplex\\nif ($null -eq $FullDuplex)\\n{\\n$FullDuplex = \\\"\\\"\\n}\\nreturn $FullDuplex\\n}\\nfunction GetAdapterPropertiesFromRegistry($AdapterName, $972Key)\\n{\\n$AdapterInstanceID = ($script:MSNetAdapters | Where-Object {$_.InterfaceDescription -eq $AdapterName}).InterfaceGuid\\n$AdapterRegKey = $972Key | Where-Object {$_.NetCfgInstanceId -Like ($AdapterInstanceID)}\\nswitch ($AdapterRegKey.Port)\\n{\\n0 {$PortNumberString = $Messages.PortA; break}\\n1 {$PortNumberString = $Messages.PortB; break}\\n2 {$PortNumberString = $Messages.PortC; break}\\n3 {$PortNumberString = $Messages.PortD; break}\\ndefault {$PortNumberString = $Messages.NotSupported; break}\\n}\\nreturn [PsCustomObject] @{\\nPort       = $AdapterRegKey.Port\\nPortString = $PortNumberString }\\n}\\nfunction GetDriverVersion($AdapterName)\\n{\\n$DriverVersion = ($MSNetAdapters | Where-Object {$_.InterfaceDescription -eq $AdapterName}).DriverVersion\\nreturn $DriverVersion\\n}\\nfunction GetAdapterMiniPortName($AdapterName)\\n{\\n$Name = ($script:PnpDevice | Where-Object {$_.Name -eq $AdapterName}).Service\\n$Instance = ($script:MSNetAdapters | Where-Object {$_.InterfaceDescription -eq $AdapterName}).InterfaceGuid\\nreturn [PsCustomObject] @{\\nName     = $Name\\nInstance = $Instance }\\n}\\nfunction GetAdapterMaxSpeed($AdapterName, $SupportedSpeeds)\\n{\\nif ($SupportedSpeeds.Length -gt 0)\\n{\\nreturn $SupportedSpeeds[-1]\\n}\\nreturn 0\\n}\\nfunction GetAdapterSupportedSpeeds($AdapterName)\\n{\\n$SpeedDuplex = $MSNetAdvProperty | Where-Object {$_.InterfaceDescription -eq $AdapterName -and $_.RegistryKeyword -eq \\\"*SpeedDuplex\\\"}\\nif ($null -ne $SpeedDuplex)\\n{\\n$RegistryValues = ($SpeedDuplex).ValidRegistryValues\\n}\\n$SupportedSpeeds = @()\\nforeach ($i in $RegistryValues)\\n{\\n$SupportedSpeeds += $SupportedSpeedsMap[$i]\\n}\\nreturn $SupportedSpeeds | Sort-Object\\n}\\nfunction GetAdapterEEEStatus($AdapterName)\\n{\\n$EEELinkAdvertisement = $MSNetAdvProperty | Where-Object {$_.InterfaceDescription -eq $AdapterName -and $_.RegistryKeyword -eq \\\"EEELinkAdvertisement\\\"}\\n$EEEStatus = 0\\n$EEEStatusString = $Messages.NotSupported\\nforeach ($EEE in $script:EEELinkStatusArray)\\n{\\nif (($null -ne $EEE) -and ($EEE.InstanceName -eq $AdapterName))\\n{\\nif ($EEE.EEELinkStatus -eq $false)\\n{\\nif ($EEELinkAdvertisement -gt 0)\\n{\\n$EEEStatus = 3 #Not Negotiated\\n$EEEStatusString = $Messages.NotNegotiated\\n}\\nelse\\n{\\n$EEEStatus = 1 #Disabled\\n$EEEStatusString = $Messages.Disabled\\n}\\n}\\nelse\\n{\\n$EEEStatus = 2 #Active\\n$EEEStatusString = $Messages.Active\\n}\\n}\\n}\\nreturn [PsCustomObject] @{\\nEEEStatus       = $EEEStatus\\nEEEStatusString = $EEEStatusString }\\n}\\nfunction GetAdapterStatus($AdapterName)\\n{\\n$AdapterStatus = [ADAPTER_STATUS]::Installed -bor [ADAPTER_STATUS]::DriverLoaded -bor [ADAPTER_STATUS]::HasDiag\\n$LinkStatus = ($MSNetAdapters | Where-Object {$_.InterfaceDescription -eq $AdapterName}).Status\\nif ($LinkStatus -eq \\u0027Up\\u0027)\\n{\\n$AdapterStatus = $AdapterStatus -bor [ADAPTER_STATUS]::HasLink\\n}\\nreturn $AdapterStatus\\n}\\nfunction GetAdapterCapabilities($AdapterName, $SupportedSpeeds)\\n{\\n$Capabilities = @([int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_VENDOR_INTEL)\\nforeach ($SupportedSpeed in $SupportedSpeeds)\\n{\\nswitch ($SupportedSpeed)\\n{\\n10000000     {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_10_MBPS; break}\\n100000000    {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_100_MBPS; break}\\n1000000000   {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_1000_MBPS; break}\\n2500000000   {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_2500_MBPS; break}\\n5000000000   {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_5000_MBPS; break}\\n10000000000  {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_10000_MBPS; break}\\n40000000000  {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_40000_MBPS; break}\\n25000000000  {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_25000_MBPS; break}\\n50000000000  {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_50000_MBPS; break}\\n100000000000 {$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_SPEED_100000_MBPS; break}\\n}\\n}\\n$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_PERFORMANCE_PROFILE\\n$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_DIAGNOSTIC_SUPPORT\\n$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_FLASH_SUPPORT\\n$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_CYPRESS\\n$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_IDENTIFY_ADAPTER_SUPPORT\\n$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_NDIS_IOAT\\n$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_EXTENDED_DMIX_SUPPORT\\n$MSDCB = $MSNetAdvProperty | Where-Object {$_.InterfaceDescription -eq $AdapterName -and $_.RegistryKeyword -eq \\\"*QOS\\\"}\\nif ($null -ne $MSDCB)\\n{\\n$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_DCB\\n}\\n$JumboFrames = $MSNetAdvProperty | Where-Object {$_.InterfaceDescription -eq $AdapterName -and $_.RegistryKeyword -eq \\\"*JumboPacket\\\"}\\nif ($null -ne $JumboFrames)\\n{\\n$Capabilities += [int][ADAPTER_CAPABILITY]::NCS_ADAPTER_CAP_JUMBO_FRAMES\\n}\\nreturn , ($Capabilities | Sort-Object)\\n}\\nfunction GetIntelDriverInfo()\\n{\\n$script:BusTypesArray        = Get-CimInstance -Namespace \\\"root\\\\wmi\\\" -ClassName IntlLan_BusType -Property BusType -ErrorAction SilentlyContinue\\n$script:DDPPkgNamesArray     = Get-CimInstance -Namespace \\\"root\\\\wmi\\\" -ClassName IntlLan_GetPackageInfo -Property Name, Major, Minor -ErrorAction SilentlyContinue\\n$script:ETrackIdsArray       = Get-CimInstance -Namespace \\\"root\\\\wmi\\\" -ClassName IntlLan_EetrackId -Property Id -ErrorAction SilentlyContinue\\n$script:NVMVersionsArray     = Get-CimInstance -Namespace \\\"root\\\\wmi\\\" -ClassName IntlLan_EepromVersion -Property Version -ErrorAction SilentlyContinue\\n$script:SanMacAddressesArray = Get-CimInstance -Namespace \\\"root\\\\wmi\\\" -ClassName IntlLan_GetSanMacAddress -Property SanMacAddr -ErrorAction SilentlyContinue\\n$script:PartNumbersArray     = Get-CimInstance -Namespace \\\"root\\\\wmi\\\" -ClassName IntlLan_PartNumberString -Property PartNumberString -ErrorAction SilentlyContinue\\n$script:PhyInfoArray         = Get-CimInstance -Namespace \\\"root\\\\wmi\\\" -ClassName IntlLan_GetPhyInfo -Property PhyInfo -ErrorAction SilentlyContinue\\n$script:FwVersionsArray      = Get-CimInstance -Namespace \\\"root\\\\wmi\\\" -ClassName IntlLan_GetOemProductVer -Property SingleNvmVersion -ErrorAction SilentlyContinue\\n$script:EEELinkStatusArray   = Get-CimInstance -Namespace \\\"root\\\\wmi\\\" -ClassName IntlLan_EEELinkStatus -Property EEELinkStatus -ErrorAction SilentlyContinue\\n}\\n\"\r\n    }\r\n    export const Get_Process = {\r\n        command: 'Get-Process',\r\n        script: \"##Get-Process##:Get-Process.ps1\\nGet-Process\\n\"\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { IdleComponent } from '@microsoft/windows-admin-center-sdk/angular';\r\nimport { DefaultModule } from './default/default.module';\r\n\r\n// These are the basic routes that are required in order to load an extension and make service calls.\r\nconst appRoutes: Routes = [\r\n    // The idle component route is used for 'long running' processes that take any amount of time (async).\r\n    // This is a required path and component.\r\n    {\r\n        path: 'idle',\r\n        component: IdleComponent\r\n    },\r\n    {\r\n        path: '',\r\n        loadChildren: './default/default.module#DefaultModule'\r\n    },\r\n    // this child route is used to route back to the home path when an invalid URL is provided to the browser.\r\n    {\r\n        path: '**',\r\n        redirectTo: ''  // double check navigation\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forRoot(\r\n            appRoutes,\r\n            {\r\n                // un-comment to enable debug log messages\r\n                // enableTracing: true,\r\n\r\n                // don't navigate at initially.\r\n                initialNavigation: 'disabled'\r\n            })\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class AppRoutingModule { }\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport './polyfills.ts';\r\n\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { CoreEnvironment } from '@microsoft/windows-admin-center-sdk/core';\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { PowerShellScripts } from './generated/powershell-scripts';\r\nimport { RuntimeVersion } from './version';\r\n\r\nif (environment.production) {\r\n    enableProdMode();\r\n}\r\n\r\n// initialize SME module environment with localization settings.\r\nCoreEnvironment.initialize(\r\n    {\r\n        name: 'Intel.PROSEt',\r\n        version: RuntimeVersion.version,\r\n        powerShellModuleName: PowerShellScripts.module,\r\n        isProduction: environment.production,\r\n        shellOrigin: '*'\r\n    },\r\n    {\r\n        resourcesPath: 'assets/strings'\r\n    })\r\n    .then(() => platformBrowserDynamic().bootstrapModule(AppModule));\r\n","var map = {\n\t\"./default/default.module\": [\n\t\t\"mqlq\",\n\t\t\"default-default-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"zn8P\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":"webpack:///"}